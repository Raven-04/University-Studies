======================================= Excerise #1 =======================================
#include <iostream>
using namespace std;

int* newArr(int size)
{
	int* arr = new int[size];

	return arr;
}

void inputElements(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cin >> arr[i];
	}
}

void printElements(int* arr, int size)
{
	for (int i = 0; i < size; i++)
	{
		cout << arr[i] << " ";
	}
	cout << endl;
}

int* cloneArr(int* arr, int size)
{
	int *clone = new int[size];

	for (int i = 0; i < size; i++)
	{
		clone[i] = arr[i];
	}

	return clone;
}

int* resizeArr(int* arr, int oldSize, int newSize)
{
	int counter;
	int *newArr = new int[newSize];

	if (oldSize > newSize)
	{
		counter = newSize;
	}
	else
	{
		counter = oldSize;
	}

	for (int i = 0; i < counter; i++)
	{
		newArr[i] = arr[i];
	}

	arr = newArr;

	return newArr;
}

int* copyArr(int* arrDest, int sizeDest, int* arrSrc, int sizeSrc, int start)
{
	for (int i = 0; i < sizeSrc; i++)
	{
		arrDest[i + start] = arrSrc[i];
	}

	return arrDest;
}

int* concatenate(int* left, int sizeLeft, int* right, int sizeRight)
{
	int* joined = new int[sizeLeft + sizeRight];

	for (int i = 0; i < sizeLeft + sizeRight; i++)
	{
		if (i < sizeLeft)
		{
			joined[i] = left[i];
		}
		else
		{
			joined[i] = right[i - sizeLeft];
		}
	}

	return joined;
}

int main() 
{
	int sizeA, sizeB;

	cout << "enter arrA size: ";
	cin >> sizeA;
	int* arrA = newArr(sizeA);

	cout << "enter arrB size: ";
	cin >> sizeB;
	int* arrB = newArr(sizeB);

	cout << "input arrA elements: " << endl;
	inputElements(arrA, sizeA);

	cout << "input arrB elements: " << endl;
	inputElements(arrB, sizeB);

	while (true) 
	{
		int option;
		cout << "choose an option: " << endl;
		cout << "\t1. concatenate A+B" << endl;
		cout << "\t2. concatenate B+A" << endl;
		cout << "\t3. clone array A" << endl;
		cout << "\t4. resize array A" << endl;
		cout << "\t5. edit array A elements" << endl;
		cout << "\t6. copy A into B" << endl;
		cout << "\t7. exit" << endl;
		cout << "option> ";
		cin >> option;
		switch (option) 
		{
		case 1:
			cout << "newArr: ";
			printElements(concatenate(arrA, sizeA, arrB, sizeB), sizeA + sizeB);
			break;
		case 2:
			cout << "newArr: ";
			printElements(concatenate(arrB, sizeB, arrA, sizeA), sizeA + sizeB);
			break;
		case 3:
			cout << "arrA: ";
			printElements(arrA, sizeA);
			cout << "newArr: ";
			printElements(cloneArr(arrA, sizeA), sizeA);
			break;
		case 4:
			int oldSize, newSize;
			oldSize = sizeA;
			cout << "enter new array size: ";
			cin >> newSize;
			cout << "arrA: ";
			printElements(resizeArr(arrA, oldSize, newSize), sizeA = newSize);
			break;
		case 5:
			cout << "input arrA elements: " << endl;
			inputElements(arrA, sizeA);
			break;
		case 6:
			copyArr(arrB, sizeB, arrA, sizeA, 0);
			cout << "arrA: "; printElements(arrA, sizeA);
			cout << "arrB: "; printElements(arrB, sizeB);
			break;
		case 7:
			return 0;
			break;
		}
	}

	return 0;
}

======================================= Excerise #2 =======================================
#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;

float getGPA(float average) {
    float gpa = -1;

    if (average >= 97 && average <= 100)
        gpa = 4.3;
    else if (average >= 93 && average < 97)
        gpa = 4;
    else if (average >= 90 && average < 93)
        gpa = 3.7;
    else if (average >= 87 && average < 90)
        gpa = 3.3;
    else if (average >= 83 && average < 87)
        gpa = 3;
    else if (average >= 80 && average < 83)
        gpa = 2.7;
    else if (average >= 77 && average < 80)
        gpa = 2.3;
    else if (average >= 73 && average < 77)
        gpa = 2;
    else if (average >= 70 && average < 73)
        gpa = 1.7;
    else if (average >= 67 && average < 70)
        gpa = 1.3;
    else if (average >= 63 && average < 67)
        gpa = 1;
    else if (average >= 60 && average < 63)
        gpa = 0.7;
    else if (average >= 0 && average < 60)
        gpa = 0;

    return gpa;
}

float** inputGrades(ifstream& fin, float** grades, int& num_of_students, int& num_of_grades)
{
    fin.open("grades.txt");

    grades = new float* [num_of_students];
    for (int i = 0; i < num_of_students; i++)
    {
        grades[i] = new float[num_of_grades + 3];
    }

    for (int i = 0 ; i < num_of_students; i++)
    {
        float sum = 0;
        fin >> grades[i][0];
        for (int j = 1; j <= num_of_grades; j++)
        {
            fin >> grades[i][j];
            sum = sum + grades[i][j];
        }
        grades[i][6] = sum / num_of_grades;
        grades[i][7] = getGPA(grades[i][6]);
    }

    fin.close();

    return grades;
}

int getTopIndex(float** grades, int num_of_students, int colSIZE)
{
    int top = 0;
    float top_gpa = grades[0][7];

    for (int i = 1; i < num_of_students; i++)
    {
        if (grades[i][7] > top_gpa)
        {
            top = i;
            top_gpa = grades[i][7];
        }
    }

    return top;
}

void printTop(float** grades, int num_of_students, int colSIZE)
{
    int top = getTopIndex(grades, num_of_students, colSIZE);

    for (int i = 0; i < colSIZE; i++)
    {
        cout << grades[top][i] << " ";
    }
}

void swapRows(float** grades, int colSIZE, int row1, int row2)
{
    for (int i = 0; i < colSIZE; i++)
    {
        float temp = grades[row1][i];
        grades[row1][i] = grades[row2][i];
        grades[row2][i] = temp;
    }
}
 
float** sortGrades(float** grades, int num_of_students, int colSIZE, int sortBy)
{
    int sort_col;
    if (sortBy == 1)
    {
        sort_col = 0;
    }// sort by student id
    else if (sortBy == 2)
    {
        sort_col = 7;
    }// sort by gpa

    float** sortedGrades;

    sortedGrades = new float* [num_of_students];
    for (int i = 0; i < num_of_students; i++)
    {
        sortedGrades[i] = new float[colSIZE + 3];
    }

    for (int i = 0; i < num_of_students; i++)
    {
        for (int j = 0; j < colSIZE; j++)
        {
            grades[i][j] = sortedGrades[i][j];
        }
    }

    for (int i = 0; i < num_of_students; i++)
    {
        for (int j = 0; j < colSIZE; i++)
        {
            if (sortedGrades[i][sort_col] > sortedGrades[i + 1][sort_col])
            {
                swapRows(sortedGrades, colSIZE, i , i+1);
            }
        }
    }

    return sortedGrades;
}

void printGrades(float** grades, int rowSIZE, int colSIZE)
{
    cout << "ID   Grade1 Grade2 Grade3 Grade4 Grade5 AVG    GPA" << endl;
    for (int i = 0; i < rowSIZE; i++) 
    {
        for (int j = 0; j < colSIZE; j++) 
        {
            if (j > 0) cout << setw(7) << left;
            cout << grades[i][j];
            if (j == 0) cout << " ";
        }
        cout << endl;
    }
}

void printRanks(float** grades, int num_of_students, int colSIZE, int sortBy)
{
    float** sorted = sortGrades(grades, num_of_students, colSIZE, sortBy);
    printGrades(sorted, num_of_students, colSIZE);
}

int main()
{
    int num_of_students, num_of_grades;
    float** grades = nullptr;
    ifstream fin;
    grades = inputGrades(fin, grades, num_of_students, num_of_grades);
    cout << grades[0][6] << ' ' << grades[0][7] << endl;

    while (true)
    {
        int option;
        cout << "choose an option:" << endl;
        cout << "\t1. print current grades" << endl;
        cout << "\t2. re-read input file" << endl;
        cout << "\t3. print top student" << endl;
        cout << "\t4. print ranks by student ID" << endl;
        cout << "\t5. print ranks by GPA" << endl;
        cout << "\t6. exit" << endl;
        cin >> option;

        switch (option)
        {
        case 1:
            printGrades(grades, num_of_students, num_of_grades);
            break;
        case 2:
            grades = inputGrades(fin, grades, num_of_students, num_of_grades);
            break;
        case 3:
            printTop(grades, num_of_students, num_of_grades + 3);
            break;
        case 4:
            printRanks(grades, num_of_students, num_of_grades + 3, 1);
            break;
        case 5:
            printRanks(grades, num_of_students, num_of_grades + 3, 2);
            break;
        case 6:
            return 0;
            break;
        }
    }

    return 0;
}

// The program wouldn't run no matter how many times to try to compile it.
// I am not sure what exactly is the reason.
