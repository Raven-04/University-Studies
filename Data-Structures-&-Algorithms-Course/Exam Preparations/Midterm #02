======================================= Info =======================================
// Midterm 2 Material:-
// --------------------
// 1. DFS (which uses stacks) and BFS (which uses stacks & queues)
// 2. Recursion
// 3. Trees

// ===============================================================================================================================================================
// General Info. //
// ===============================================================================================================================================================
// | Stacks (LIFO) |
// A container (an object for storing other objects) that only allows access to the last added element (see it as a stack of bread - Vertical).
// # Main Operations:-
// push(), pop(), top(), size(), isEmpty(), isFull()
// Underflow: popping from an empty stack.
// Overflow: pushing into a full stack.
// ------------------------------------------
// | Queues (FIFO) |
// Only have access to the first element added (see it as a grocery line - Horizontal).
// # Main Operations:-
// push(), pop(), front(), rear(), size(), isEmpty(), isFull()
// ------------------------------------------
// | Deapth-First Search (DFS) |
// Traverses the graph branch by branch.
// Used for traversing or searching through a network of interconnected nodes (searches for all vertices).
// ------------------------------------------
// | Breadth-First Search (BFS) |
// Traverses the graph level by level.
// Used for finding the shortest path on graphs (searches for a specific node and it's shortest path).
// |Tail Recursion|
// Typically, prints in a decreasing order (3, 2, 1), in other words to the tail.
// |Head Recursion|
// Typically, prints in a increasing order (1, 2, 3), in other words to the head.

============================== Depth First Search (DFS) ============================
#include <iostream>
#include <vector>
#include <stack>
using namespace std;

class Graph {
private:
	int vertices;
	vector<vector<int>> adjList;

public:
	Graph(int V) : vertices(V), adjList(V) {}

	void addEdge(int u, int v) {
		adjList[u].push_back(v);
		adjList[v].push_back(u);
	}

	void DFS(int startVertex, int targetVertex) {
		vector<bool> visited(vertices, false);
		stack<int> stack;
		bool targetFound = false;

		stack.push(startVertex);

		while (!stack.empty()) {
			int current = stack.top();
			stack.pop();

			if (!visited[current]) {
				cout << current << " ";
				visited[current] = true;
			}

			if (current == targetVertex) {
				visited[targetVertex] = true;
				targetFound = true;
				break;
			}

			for (int neighbor : adjList[current]) {
				if (!visited[neighbor]) {
					stack.push(neighbor);
				}
			}
		}
		
		if (!targetFound) {
			cout << "\nThe target was not found to be in the DFS." << endl;
		}
	}
};

int main() {
	Graph g(9); // The number is the amount of vertices/nodes

	g.addEdge(0, 1);
	g.addEdge(0, 2);
	g.addEdge(0, 3);
	g.addEdge(1, 4);
	g.addEdge(1, 5);
	g.addEdge(2, 6);
	g.addEdge(3, 7);
	g.addEdge(3, 8);

	cout << "Depth-First Traversal starting from vertex 0:-" << endl;
	g.DFS(0, 8);

	cout << endl;

	return 0;
}

============================= Breadth First Search (BFS) ===========================
#include <iostream>
#include <vector>
#include <stack>
#include <queue>
using namespace std;

class Graph {
private:
	int vertices;
	vector<vector<int>> adjlist;

public:
	Graph(int V) : vertices(V), adjlist(V) {}

	void addEdge(int u, int v) {
		adjlist[u].push_back(v);
		adjlist[v].push_back(u);
	}

	void BFS(int startVertex, int targetVertex) {
		int numNodes = adjlist.size();
		vector<bool> visited(vertices, false);
		vector<int> distance(numNodes, -1);
		queue<int> q;

		q.push(startVertex);
		visited[startVertex] = true;
		distance[startVertex] = 0;

		while (!q.empty()) {
			int current = q.front();
			q.pop();

			for (int neighbor : adjlist[current]) {
				if (!visited[neighbor]) {
					q.push(neighbor);
					visited[neighbor] = true;
					distance[neighbor] = distance[current] + 1;
				}
			}
		}

		if (distance[targetVertex] == -1) {
			cout << "No path exists from " << startVertex << " to " << targetVertex << endl;
		}
		else {
			cout << "The shortest path from " << startVertex << " to " << targetVertex << " is of length " << distance[targetVertex] << ": ";
			int node = targetVertex;
			//stack<int> store;

			while (node != startVertex) {
				cout << node << " ";
				// store.push(node);

				for (int neighbor : adjlist[node]) {
					if (distance[neighbor] == distance[node] - 1) {
						node = neighbor;
						break;
					}
				}
			}

			cout << startVertex << endl;
			//store.push(startVertex);

			/*while (!store.empty()) {
				cout << store.top() << " ";
				store.pop();
			}*/
			cout << endl;
		}
	}
};

int main() {
	Graph G(16);
	G.addEdge(0, 3);
	G.addEdge(0, 2);
	G.addEdge(0, 1);

	G.addEdge(3, 9);
	G.addEdge(3, 8);

	G.addEdge(8, 14);
	G.addEdge(9, 8);

	G.addEdge(2, 7);
	G.addEdge(2, 6);

	G.addEdge(6, 11);
	G.addEdge(7, 13);
	G.addEdge(7, 12);

	G.addEdge(11, 15);
	G.addEdge(13, 15);

	G.addEdge(1, 5);
	G.addEdge(1, 4);
	G.addEdge(4, 5);
	G.addEdge(5, 10);

	cout << "Shortest Path from vertex 0 to 9 " << endl;
	G.BFS(0, 9);

	cout << "\n\nShortest Path from vertex 0 to 11 " << endl;
	G.BFS(0, 11);

	cout << "\n\nShortest Path from vertex 0 to 4 " << endl;
	G.BFS(0, 4);

	cout << "\n\nShortest Path from vertex 0 to 14 " << endl;
	G.BFS(0, 14);

	cout << "\n\nShortest Path from vertex 0 to 15 " << endl;
	G.BFS(0, 15);

	return 0;
}

===================================== Recursion ====================================
#include <iostream>
using namespace std;

// Example #1
/*int fact(int n) {
	if (n <= 1) {
		return 1;
	}
	else {
		return n*fact(n - 1);
	}
}

int main() {
	int n = 3;

	cout << "The factoral of " << n << " is: " << fact(n) << endl;

	return 0;
}*/

// Example #2 (tail recursion)
/*void fun(int n) {
	if (n > 0) {
		cout << n << " ";

		fun(n - 1);
	}
}

int main() {
	int n = 5;

	fun(n);

	return 0;
}*/

// Example #3 (head recursion)
/*void fun(int n) {
	if (n > 0) {
		fun(n - 1);
		
		cout << " " << n;
	}
}

int main() {
	int n = 3;

	fun(n);

	return 0;
}*/

// Example #4 (tree recursion)
/*void fun(int n) {
	if (n > 0) {
		cout << " " << n;

		fun(n - 1);

		fun(n - 1);
	}
}

int main() {
	fun(4);

	return 0;
}*/

// Example #5 (nested recursion)
/*int fun(int n) {
	if (n > 100) {
		return n - 10;
	}

	return fun(fun(n + 11));
}

int main() {
	int r;
	r = fun(95);

	cout << " " << r;

	return 0;
}*/

// Example #6 (indirect recursion)
/*void funB(int n);

void funA(int n) {
	if (n > 0) {
		cout << " " << n;

		funB(n - 1);
	}
}

void funB(int n) {
	if (n > 1) {
		cout << " " << n;

		funA(n / 2);
	}
}

int main() {
	funA(20);

	return 0;
}*/

// Example #7
/*void printFun(int test) {
	if (test < 1) {
		return;
	}
	else {
		cout << test << " ";
		printFun(test - 1);
		cout << test << " ";
		
		return;
	}
}

int main() {
	int test = 3;

	printFun(test);

	return 0;
}*/

// Example #8
int fib(int n) {
	if (n == 0) {
		return 0;
	}

	if (n == 1 || n == 2) {
		return 1;
	}
	else {
		return (fib(n - 1) + fib(n - 2));
	}
}

int main() {
	int n = 5;

	for (int i = 0; i < n; i++) {
		cout << fib(i) << " ";
	}

	return 0;
}

============================== Binary Search Tree (BST) ===============================
#include <iostream>
using namespace std;

struct Node {
	int key;
	Node* left, * right;
};

Node* newNode(int item) {
	Node* temp = new Node;
	temp->key = item;
	temp->left = temp->right = NULL;

	return temp;
}

Node* insert(Node* node, int key) {
	if (node == NULL) {
		return newNode(key);
	}

	if (key < node->key) {
		node->left = insert(node->left, key);
	}
	else if (key > node->key) {
		node->right = insert(node->right, key);
	}

	return node;
}

Node* deleteNode(Node* node, int key) {
	if (node == NULL) {
		return node;
	}

	if (key < node->key) {
		node->left = deleteNode(node->left, key);
		return node;
	}
	else if (key > node->key) {
		node->right = deleteNode(node->right, key);
		return node;
	}

	if (node->left == NULL) {
		Node* temp = node->right;
		delete node;
		return temp;
	}
	else if (node->right == NULL) {
		Node* temp = node->left;
		delete node;
		return temp;
	}

	Node* succParent = node;
	Node* succ = node->right;
	while (succ->left != NULL) {
		succParent = succ;
		succ = succ->left;
	}

	node->key = succ->key;

	if (succParent->left == succ) {
		succParent->left = succ->right;
	}
	else {
		succParent->right = succ->right;
	}

	delete succ;
	return node;
}

Node* search(Node* root, int key) {
	if (root == NULL || root->key == key) {
		return root;
	}

	if (root->key < key) {
		return search(root->right, key);
	}

	return search(root->left, key);
}

void preOrder(Node* root) {
	if (root != NULL) {
		cout << " " << root->key;

		preOrder(root->left);
		
		preOrder(root->right);
	}
}

int size(Node* root) {
	if (root != NULL) {
		int l = size(root->left);
		int r = size(root->right);

		return 1 + l + r;
	}

	return 0;
}

int height(Node* root) {
	if (root != NULL) {
		int l = height(root->left);
		int r = height(root->right);

		if (l > r) {
			return l + 1;
		}
		else {
			return r + 1;
		}
	}

	return 0;
}

int main() {
	Node* root = NULL;

	root = insert(root, 50);
	insert(root, 30);
	insert(root, 20);
	insert(root, 40);
	insert(root, 70);
	insert(root, 60);
	insert(root, 80);

	deleteNode(root, 80);

	preOrder(root);
	cout << endl << endl;;

	int key = 60;

	if (search(root, key) == NULL) {
		cout << key << " not found." << endl;
	}
	else {
		cout << key << " found." << endl;
	}

	cout << "\nThe total # of nodes is: " << size(root) << endl;

	cout << "\nThe height of the tree is: " << height(root) << endl;

	return 0;
}

====================================== AVL Tree ====================================
#include <iostream>
using namespace std;

struct Node {
	int key;
	Node* left, * right;
};

int height(Node* root) {
	if (root != NULL) {
		int l = height(root->left);
		int r = height(root->right);

		if (l > r) {
			return l + 1;
		}
		else {
			return r + 1;
		}
	}

	return 0;
}

int getBalanceFactor(Node* n) {
	if (n == NULL) {
		return -1;
	}
	else {
		return height(n->left) - height(n->right);
	}
}

Node* rightRotate(Node* y) {
	Node* x = y->left;
	Node* T2 = x->right;

	x->right = y;
	y->left = T2;

	return x;
}

Node* leftRotate(Node* x) {
	Node* y = x->right;
	Node* T2 = y->left;

	y->left = x;
	x->right = T2;

	return y;
}

Node* insert(Node* r, Node* newNode) {
	if (r == NULL) {
		r = newNode;
		return r;
	}

	if (newNode->key < r->key) {
		r->left = insert(r->left, newNode);
	}
	else if (newNode->key > r->key) {
		r->right = insert(r->right, newNode);
	}
	else {
		cout << "No duplicate values." << endl;
		return r;
	}

	int bf = getBalanceFactor(r);

	if (bf > 1 && newNode->key < r->left->key) {
		return rightRotate(r);
	}
	if (bf < -1 && newNode->key > r->right->key) {
		return leftRotate(r);
	}
	if (bf > 1 && newNode->key > r->left->key) {
		r->left = leftRotate(r->left);
		return rightRotate(r);
	}
	if (bf < -1 && newNode->key < r->right->key) {
		r->right = rightRotate(r->right);
		return leftRotate(r);
	}

	return r;
}

int main() {
	

	return 0;
}
