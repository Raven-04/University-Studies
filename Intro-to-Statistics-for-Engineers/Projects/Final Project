#######| STAT. 201 Final Project |#######

library(lessR)
summary(SurveyData_Fall2023)                # Observing and identifying the NA's (missing) for each variable of the data set.

# (B) --------------------------------------------------------------------------------------------------------------------------------------------------------
data<-SurveyData
data$Gender<-as.factor(data$Gender)
data$College<-as.factor(data$College)
data$Academic<-as.factor(data$Academic)
data$Origin<-as.factor(data$Origin)
data$Living<-as.factor(data$Living)
str(data)                                   # To check the structure of the data.

# (C) --------------------------------------------------------------------------------------------------------------------------------------------------------
set.seed(00094286)
s<-sample(1:dim(data)[1], size=100)
sample_data<- data[s,]
sample_data

# (D) --------------------------------------------------------------------------------------------------------------------------------------------------------
## (i) =======================================================================================================================================================
# Pie Chart for Gender
summary(sample_data$Gender)
gen = sample_data$Gender
PieChart(gen, hole = F, main = "Gender Pie Chart")
legend("topright", legend = c("Male", "Female"), fill = c("lightblue", "gold"))

# Pie Chart for Academic Status
summary(sample_data$Academic)
acad_stat = sample_data$Academic
PieChart(acad_stat, hole = F, main = "Academic Status Pie Chart")
legend("topright", legend = c("Freshman", "Sophomore", "Junior", "Senior"), fill = c("lightblue", "gold", "green", "lightpink"))

# Pie Chart for Region of Living
summary(sample_data$Origin)
ori = sample_data$Origin
PieChart(ori, hole = F, main = "Origin Pie Chart")
legend("topright", legend = c("GGC", "Africa", "Middle East", "Other"), fill = c("lightblue", "gold", "green", "lightpink"))

# Pie Chart for Place of Living
summary(sample_data$Living)
liv = sample_data$Living
PieChart(liv, hole = F, main = "Living Pie Chart")
legend("topright", legend = c("On Campus", "Off Campus"), fill = c("lightblue", "gold"))

## (ii) ======================================================================================================================================================
gpa_M = sample_data$GPA[sample_data$Gender == 1]
gpa_M
summary(gpa_M)
SummaryStats(gpa_M)

gpa_F = sample_data$GPA[sample_data$Gender == 2]
gpa_F
summary(gpa_F)
SummaryStats(gpa_F)
boxplot(gpa_M, gpa_F, horizontal = T, xlab = "GPA", names = c("Male", "Female"), col = rainbow(2), main = "Male and Female GPA Boxplot")

# 2 sample t-test (muF > muM)
# H0: muF - muM <= 0
# HA: muF - muM > 0
t.test(gpa_F, gpa_M, conf.level = 0.95, mu = 0, alternative = "greater", var.equal = T)       # FTR H0

## (iii) ======================================================================================================================================================
# muON != muOFF
study_ON = sample_data$Sudying_Time[sample_data$Living == 1]
study_ON
summary(study_ON)
SummaryStats(study_ON)
# nON = 41

study_OFF = sample_data$Sudying_Time[sample_data$Living == 2]
study_OFF
summary(study_OFF)
SummaryStats(study_OFF)
#nOFF = 59

# sample size for both on and off campus are large, assume normality.
# 2 sample t-test (muON != muOFF)
# H0: muON - muOFF = 0
# Ha: muON - muOFF != 0
t.test(study_ON, study_OFF, alternative = "two.sided", mu = 0, conf.level = 0.95)          # FTR H0

## (iv) ======================================================================================================================================================
# P > 0.75
# H0: P <= 0.75
# Ha: P > 0.75
GCC = sample_data$Origin[sample_data$Origin == 1]
GCC
length(GCC)
# 42 are from the GCC.

non_GCC = sample_data$Origin[sample_data$Origin != 1]
non_GCC
length(non_GCC)
# 58 are not from the GCC.

# 1 sample proportion test
prop.test(x = 58, n = 100, alternative = "greater", p = 0.75)                             # FTR H0

## (v) ======================================================================================================================================================
study_time = sample_data$Sudying_Time
study_time
s_GPA = sample_data$GPA
s_GPA

cor(study_time, s_GPA)   # r = 0.2339238
cor.test(study_time, s_GPA, conf.level = 0.95)
