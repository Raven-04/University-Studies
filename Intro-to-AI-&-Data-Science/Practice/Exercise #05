import pandas as pd 
import numpy as np 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression 
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score 
import matplotlib.pyplot as plt 
import seaborn as sns 
from sklearn.preprocessing import OneHotEncoder 
data = pd.read_csv('possum.csv') 
data.head()

data.describe()

missing_values = data.isnull().sum() 
print("Missing Values:\n", missing_values)

data.dropna(inplace=True)

categorical_cols = ['sex'] 
encoded_columns = pd.get_dummies(data[categorical_cols], prefix=categorical_cols) 
data = pd.concat([data.drop(categorical_cols, axis=1), encoded_columns], axis=1)

columns_to_standardize = ['hdlngth', 'skullw', 'totlngth', 'taill', 'footlgth', 'earconch', 'eye', 'chest', 'belly'] 
scaler = StandardScaler() 
data[columns_to_standardize] = scaler.fit_transform(data[columns_to_standardize])

data.drop(columns=['case', 'site', 'Pop'], inplace=True)

# Separate predictors and target variable 
X = data.drop(columns=['age']) 
y = data['age'] 
# Splitting data into a training set and a testing set 
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) 
# Creating the model 
model = LinearRegression() 
# Training the model 
model.fit(X_train, y_train) 
# Prediction using the trained model 
y_pred = model.predict(X_test)

# Model evaluation 
mae = mean_absolute_error(y_test, y_pred) 
mse = mean_squared_error(y_test, y_pred) 
r2 = r2_score(y_test, y_pred) 
 
print("Mean Absolute Error:", mae) 
print("Mean Squared Error:", mse) 
print("R-squared Score:", r2)

# Plotting coefficients 
coefficients = pd.DataFrame({'feature': X.columns, 'coefficient': model.coef_}) 
 
plt.figure(figsize=(10, 6)) 
plt.barh(coefficients['feature'], coefficients['coefficient']) 
plt.xlabel('Coefficient Value') 
plt.ylabel('Feature') 
plt.title('Coefficients of Features') 
plt.show()

# Scatter plot of actual vs. predicted values 
plt.figure(figsize=(10, 6)) 
plt.scatter(y_test, y_pred) 
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--') 
plt.xlabel('Actual Values') 
plt.ylabel('Predicted Values') 
plt.title('Actual vs. Predicted Values') 
plt.show()
